name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    permissions: write-all
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: rustify-linux-amd64
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: rustify-darwin-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: rustify-darwin-arm64

    steps:
    - uses: actions/checkout@v3
    
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev docker.io
        echo "OPENSSL_DIR=/usr" >> $GITHUB_ENV
        echo "OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
        echo "OPENSSL_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install openssl@3 docker
        OPENSSL_ROOT=$(brew --prefix openssl@3)
        echo "OPENSSL_DIR=$OPENSSL_ROOT" >> $GITHUB_ENV
        echo "OPENSSL_LIB_DIR=$OPENSSL_ROOT/lib" >> $GITHUB_ENV
        echo "OPENSSL_INCLUDE_DIR=$OPENSSL_ROOT/include" >> $GITHUB_ENV
        
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
        components: clippy, rustfmt

    - name: Check formatting
      run: cargo fmt -- --check

    - name: Run clippy
      run: cargo clippy -- -D warnings

    - name: Run tests
      run: cargo test --target ${{ matrix.target }}

    - name: Build
      env:
        OPENSSL_DIR: ${{ env.OPENSSL_DIR }}
        OPENSSL_LIB_DIR: ${{ env.OPENSSL_LIB_DIR }}
        OPENSSL_INCLUDE_DIR: ${{ env.OPENSSL_INCLUDE_DIR }}
        MACOSX_DEPLOYMENT_TARGET: '10.15'
      run: cargo build --release --target ${{ matrix.target }}

    - name: Package Binary
      run: |
        cd target/${{ matrix.target }}/release
        chmod +x rustify
        tar -czf ../../../${{ matrix.binary_name }}.tar.gz rustify
        cd ../../..
        shasum -a 256 ${{ matrix.binary_name }}.tar.gz > ${{ matrix.binary_name }}.tar.gz.sha256

    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ matrix.binary_name }}.tar.gz
          ${{ matrix.binary_name }}.tar.gz.sha256
        token: ${{ secrets.GITHUB_TOKEN }}

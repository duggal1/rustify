name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.os }}
    permissions: write-all
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: rustify-linux-amd64
            cross: false
            
          # Linux ARM64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_name: rustify-linux-arm64
            cross: true
            
          # macOS x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: rustify-darwin-amd64
            cross: false
            
          # macOS ARM64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: rustify-darwin-arm64
            cross: false

    steps:
      - uses: actions/checkout@v3

      # Cache dependencies
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # Ubuntu-specific setup
      - name: Setup Ubuntu dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pkg-config \
            libssl-dev \
            build-essential \
            cmake \
            musl-tools
          
          if [ "${{ matrix.cross }}" = "true" ]; then
            sudo apt-get install -y \
              gcc-aarch64-linux-gnu \
              g++-aarch64-linux-gnu \
              libc6-dev-arm64-cross
            
            echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
            echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
            echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
            echo "PKG_CONFIG_SYSROOT_DIR=/usr/aarch64-linux-gnu" >> $GITHUB_ENV
            echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
            echo "OPENSSL_DIR=/usr/aarch64-linux-gnu" >> $GITHUB_ENV
            echo "OPENSSL_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
            echo "OPENSSL_LIB_DIR=/usr/lib/aarch64-linux-gnu" >> $GITHUB_ENV
          fi

      # macOS-specific setup
      - name: Setup macOS dependencies
        if: matrix.os == 'macos-latest'
        run: |
          brew install openssl@3
          echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$(brew --prefix openssl@3)/include" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV
          
          # For ARM64 macOS
          if [ "${{ matrix.target }}" = "aarch64-apple-darwin" ]; then
            echo "SDKROOT=$(xcrun -sdk macosx --show-sdk-path)" >> $GITHUB_ENV
            echo "MACOSX_DEPLOYMENT_TARGET=11.0" >> $GITHUB_ENV
          fi

      # Install Rust toolchain
      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
          components: rustfmt, clippy

      # Build binary with warnings allowed
      - name: Build Release Binary
        uses: actions-rs/cargo@v1
        env:
          RUSTFLAGS: ""  # Override any warning flags
        with:
          command: build
          args: --release --target ${{ matrix.target }}
          use-cross: ${{ matrix.cross }}

      - name: Package Binary
        run: |
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a ../../../${{ matrix.binary_name }}.zip rustify.exe
            cd ../../../
            sha256sum ${{ matrix.binary_name }}.zip > ${{ matrix.binary_name }}.zip.sha256
          else
            tar czf ../../../${{ matrix.binary_name }}.tar.gz rustify
            cd ../../../
            sha256sum ${{ matrix.binary_name }}.tar.gz > ${{ matrix.binary_name }}.tar.gz.sha256
          fi

      # Upload to release
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ matrix.binary_name }}.*

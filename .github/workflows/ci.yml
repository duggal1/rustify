name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    # Windows-specific setup
    - name: Setup Windows dependencies
      if: matrix.os == 'windows-latest'
      run: |
        vcpkg integrate install
        vcpkg install openssl:x64-windows-static
        echo "OPENSSL_DIR=$env:VCPKG_INSTALLATION_ROOT\installed\x64-windows-static" >> $env:GITHUB_ENV
        echo "OPENSSL_STATIC=1" >> $env:GITHUB_ENV
      shell: pwsh

    # macOS-specific setup
    - name: Setup macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        brew install openssl@3
        echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
        echo "OPENSSL_INCLUDE_DIR=$(brew --prefix openssl@3)/include" >> $GITHUB_ENV
        echo "OPENSSL_LIB_DIR=$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy

    # Add host target explicitly
    - name: Add host target
      run: |
        rustup target add ${{ matrix.os == 'windows-latest' && 'x86_64-pc-windows-msvc' || matrix.os == 'macos-latest' && 'x86_64-apple-darwin' || 'x86_64-unknown-linux-gnu' }}

    - name: Check formatting
      continue-on-error: true
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: -- --check

    - name: Run clippy
      continue-on-error: true
      uses: actions-rs/cargo@v1
      with:
        command: clippy
        args: -- -D warnings

    # Modified test step
    - name: Run tests
      uses: actions-rs/cargo@v1
      env:
        CARGO_TERM_COLOR: always
        CARGO_INCREMENTAL: 0
        RUSTFLAGS: "-C target-feature=+crt-static"
        RUST_BACKTRACE: 1
        CARGO_NET_RETRY: 10
      with:
        command: test
        args: --all-features --target ${{ matrix.os == 'windows-latest' && 'x86_64-pc-windows-msvc' || matrix.os == 'macos-latest' && 'x86_64-apple-darwin' || 'x86_64-unknown-linux-gnu' }}